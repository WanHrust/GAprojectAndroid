var crypto = require('crypto'); 
var rand = require('csprng'); 
var mongoose = require('mongoose'); 
var gravatar = require('gravatar'); 
var Event = require('config/modelEvent');  
var ActionModel = require('config/modelAction');

//Aggregation function
function getAmount(id_event, act, callback) {
    Event.aggregate([
    	{ $match: {_id: id_event }},
        { $unwind: "$usersActing" }, 	// creates a doc for every array element - each action
        { $group: {
            _id: null,
            energy: { $sum: "$usersActing.amountEnergy"  }
        }}
    ], function (err, result) {
        if (err) {
            console.log(err);
            return;
        }


        if (result.length > 0) {
        	callback({'response':result[0].energy + act, 'res':"true"});
	}
	else {
		callback({'response':act, 'res':"true"});
	}
        return result;
            //console.log("**** RESULT " + result);
            //return JSON.stringify(result);
    });
}

exports.action = function(act,userEmail, callback) {  

    //Finding the last Event
    Event.findOne({}, {}, { sort: { 'date' : -1 } }, function(err, event) {
	console.log(event.date);
	console.log(event._id);
	console.log(act);
        //Add the action of the user to the ones of the actions
        var newAction = new ActionModel({ email : userEmail, amountEnergy : act });


        if(event.usersActing === undefined){
            event.usersActing[0] = newAction;
        }
        else{
            event.usersActing.push(newAction); 
        }
	
        event.save(function(err) {
            if (err) 
                throw err;
            console.log('Unexpected success!');    
        });
         console.log(event._id);
        
        //console.log("GETTING RESULT --> " + getProgess(event._id, callback));
        getAmount(event._id, act, callback);
        //callback({'response':progress, 'res':"true"});  
    });
}
